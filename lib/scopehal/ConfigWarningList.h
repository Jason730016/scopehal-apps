/***********************************************************************************************************************
*                                                                                                                      *
* libscopehal                                                                                                          *
*                                                                                                                      *
* Copyright (c) 2012-2024 Andrew D. Zonenberg and contributors                                                         *
* All rights reserved.                                                                                                 *
*                                                                                                                      *
* Redistribution and use in source and binary forms, with or without modification, are permitted provided that the     *
* following conditions are met:                                                                                        *
*                                                                                                                      *
*    * Redistributions of source code must retain the above copyright notice, this list of conditions, and the         *
*      following disclaimer.                                                                                           *
*                                                                                                                      *
*    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the       *
*      following disclaimer in the documentation and/or other materials provided with the distribution.                *
*                                                                                                                      *
*    * Neither the name of the author nor the names of any contributors may be used to endorse or promote products     *
*      derived from this software without specific prior written permission.                                           *
*                                                                                                                      *
* THIS SOFTWARE IS PROVIDED BY THE AUTHORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED   *
* TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL *
* THE AUTHORS BE HELD LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES        *
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR       *
* BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT *
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE       *
* POSSIBILITY OF SUCH DAMAGE.                                                                                          *
*                                                                                                                      *
***********************************************************************************************************************/

/**
	@file
	@author Andrew D. Zonenberg
	@brief Declaration of ConfigWarningList, ConfigWarningMessage, and WarningList
	@ingroup core
 */
#ifndef ConfigWarningList_h
#define ConfigWarningList_h

class Instrument;
class InstrumentChannel;

/**
	@brief A warning message displayed by a driver during loading of a session
	@ingroup core

	These warnings are intended to provide a "speed bump" preventing users from loading instrument settings
	which may damage their hardware.
 */
class ConfigWarningMessage
{
public:

	///@brief Human readable name of the channel and setting (e.g. "CH2 input")
	std::string m_object;

	///@brief Warning message explaining the change (e.g. "switching out 10 dB attenuator")
	std::string m_messageText;

	///@brief The current value of the setting
	std::string m_existingValue;

	///@brief The new value of the setting being loaded
	std::string m_proposedValue;

	ConfigWarningMessage(const std::string& o, const std::string& m, const std::string& e, const std::string& p)
	: m_object(o)
	, m_messageText(m)
	, m_existingValue(e)
	, m_proposedValue(p)
	{}
};

/**
	@brief A list of ConfigWarningMessage's
	@ingroup core
 */
class WarningList
{
public:

	///@brief The messages in the list
	std::vector<ConfigWarningMessage> m_messages;
};

/**
	@brief All warnings generated by a configuration we're in the process of loading
	@ingroup core
 */
class ConfigWarningList
{
public:

	///@brief Map from instrument to list of warnings produced by that driver
	std::map<Instrument*, WarningList> m_warnings;

	///@brief Returns true if we have no warnings, false if at least one warning
	bool empty() const
	{ return m_warnings.empty(); }

	///@brief Resets to the empty state
	void clear()
	{ m_warnings.clear(); }
};

#endif
